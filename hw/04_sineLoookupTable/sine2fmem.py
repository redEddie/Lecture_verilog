#!/usr/bin/env python3

from math import ceil, sin, pi
import sys

# math.sin works in radians: 0-90° == π/2 radians

if (len(sys.argv) > 1):
    rows = int(sys.argv[1])
else:
    rows = 256

if (len(sys.argv) > 2):
    width = int(sys.argv[2])
else:
    width = 16

print("// Generated by sine2fmem.py from Project F")
print("// Learn more at https://github.com/projf/fpgatools")

fmt_width = str(ceil(width/4))  # four bits per hex digit
fmt_string = "{:0" + fmt_width + "X}  // {:03}: sin({:.4f}) = {:.4f} => {:0d}"
'''
    "{:0" + fmt_width + "X}"
    {:04X} => 4자리로 16진수(X)를 표시해라.
    :0 => 0를 빈칸에 채워라
    4 => 채울 빈칸은 4자리다
    X => 16진수다
'''
'''
for i in range(rows):
    val = (pi/(2*rows)) * i
    res = sin(val)
    res_scaled = round((2**width) * res)
    if res_scaled == 2**width:  # maximum value uses too many bits
        res_scaled -= 1;        # accompanying Verilog module handles this
    print(fmt_string.format(res_scaled, i, val, res))
'''
for i in range(rows):
    val = (pi/(2*rows)) * i # pi/2를 256개로 나누고
    res = sin(val)          # 나눈 애를 가지고 sin을 하면 0보다 작은 게 나오겠지.
    res_scaled = round((2**width) * res) # result를 2^16승(right shift) 해준다. 그럼 소수16자리까지 나오겠지.
    if res_scaled == 2**width:
        res_scaled -= 1;
    print(fmt_string.format(res_scaled, i, val, res, res_scaled))
